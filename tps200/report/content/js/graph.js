/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 77.0, "minX": 0.0, "maxY": 30264.0, "series": [{"data": [[0.0, 951.0], [0.1, 951.0], [0.2, 951.0], [0.3, 951.0], [0.4, 951.0], [0.5, 959.0], [0.6, 959.0], [0.7, 959.0], [0.8, 959.0], [0.9, 959.0], [1.0, 1005.0], [1.1, 1005.0], [1.2, 1005.0], [1.3, 1005.0], [1.4, 1005.0], [1.5, 1052.0], [1.6, 1052.0], [1.7, 1052.0], [1.8, 1052.0], [1.9, 1052.0], [2.0, 1105.0], [2.1, 1105.0], [2.2, 1105.0], [2.3, 1105.0], [2.4, 1105.0], [2.5, 1118.0], [2.6, 1118.0], [2.7, 1118.0], [2.8, 1118.0], [2.9, 1118.0], [3.0, 1328.0], [3.1, 1328.0], [3.2, 1328.0], [3.3, 1328.0], [3.4, 1328.0], [3.5, 2269.0], [3.6, 2269.0], [3.7, 2269.0], [3.8, 2269.0], [3.9, 2269.0], [4.0, 2325.0], [4.1, 2325.0], [4.2, 2325.0], [4.3, 2325.0], [4.4, 2325.0], [4.5, 2435.0], [4.6, 2435.0], [4.7, 2435.0], [4.8, 2435.0], [4.9, 2435.0], [5.0, 2466.0], [5.1, 2466.0], [5.2, 2466.0], [5.3, 2466.0], [5.4, 2466.0], [5.5, 2523.0], [5.6, 2523.0], [5.7, 2523.0], [5.8, 2523.0], [5.9, 2523.0], [6.0, 2629.0], [6.1, 2629.0], [6.2, 2629.0], [6.3, 2629.0], [6.4, 2629.0], [6.5, 2861.0], [6.6, 2861.0], [6.7, 2861.0], [6.8, 2861.0], [6.9, 2861.0], [7.0, 2872.0], [7.1, 2872.0], [7.2, 2872.0], [7.3, 2872.0], [7.4, 2872.0], [7.5, 2887.0], [7.6, 2887.0], [7.7, 2887.0], [7.8, 2887.0], [7.9, 2887.0], [8.0, 2924.0], [8.1, 2924.0], [8.2, 2924.0], [8.3, 2924.0], [8.4, 2924.0], [8.5, 2958.0], [8.6, 2958.0], [8.7, 2958.0], [8.8, 2958.0], [8.9, 2958.0], [9.0, 2964.0], [9.1, 2964.0], [9.2, 2964.0], [9.3, 2964.0], [9.4, 2964.0], [9.5, 2998.0], [9.6, 2998.0], [9.7, 2998.0], [9.8, 2998.0], [9.9, 2998.0], [10.0, 3005.0], [10.1, 3005.0], [10.2, 3005.0], [10.3, 3005.0], [10.4, 3005.0], [10.5, 3054.0], [10.6, 3054.0], [10.7, 3054.0], [10.8, 3054.0], [10.9, 3054.0], [11.0, 3055.0], [11.1, 3055.0], [11.2, 3055.0], [11.3, 3055.0], [11.4, 3055.0], [11.5, 3079.0], [11.6, 3079.0], [11.7, 3079.0], [11.8, 3079.0], [11.9, 3079.0], [12.0, 3088.0], [12.1, 3088.0], [12.2, 3088.0], [12.3, 3088.0], [12.4, 3088.0], [12.5, 3130.0], [12.6, 3130.0], [12.7, 3130.0], [12.8, 3130.0], [12.9, 3130.0], [13.0, 3179.0], [13.1, 3179.0], [13.2, 3179.0], [13.3, 3179.0], [13.4, 3179.0], [13.5, 3192.0], [13.6, 3192.0], [13.7, 3192.0], [13.8, 3192.0], [13.9, 3192.0], [14.0, 3660.0], [14.1, 3660.0], [14.2, 3660.0], [14.3, 3660.0], [14.4, 3660.0], [14.5, 4579.0], [14.6, 4579.0], [14.7, 4579.0], [14.8, 4579.0], [14.9, 4579.0], [15.0, 4668.0], [15.1, 4668.0], [15.2, 4668.0], [15.3, 4668.0], [15.4, 4668.0], [15.5, 4741.0], [15.6, 4741.0], [15.7, 4741.0], [15.8, 4741.0], [15.9, 4741.0], [16.0, 5207.0], [16.1, 5207.0], [16.2, 5207.0], [16.3, 5207.0], [16.4, 5207.0], [16.5, 5257.0], [16.6, 5257.0], [16.7, 5257.0], [16.8, 5257.0], [16.9, 5257.0], [17.0, 5280.0], [17.1, 5280.0], [17.2, 5280.0], [17.3, 5280.0], [17.4, 5280.0], [17.5, 5347.0], [17.6, 5347.0], [17.7, 5347.0], [17.8, 5347.0], [17.9, 5347.0], [18.0, 5371.0], [18.1, 5371.0], [18.2, 5371.0], [18.3, 5371.0], [18.4, 5371.0], [18.5, 5386.0], [18.6, 5386.0], [18.7, 5386.0], [18.8, 5386.0], [18.9, 5386.0], [19.0, 5387.0], [19.1, 5387.0], [19.2, 5387.0], [19.3, 5387.0], [19.4, 5387.0], [19.5, 5390.0], [19.6, 5390.0], [19.7, 5390.0], [19.8, 5390.0], [19.9, 5390.0], [20.0, 5413.0], [20.1, 5413.0], [20.2, 5413.0], [20.3, 5413.0], [20.4, 5413.0], [20.5, 5421.0], [20.6, 5421.0], [20.7, 5421.0], [20.8, 5421.0], [20.9, 5421.0], [21.0, 5625.0], [21.1, 5625.0], [21.2, 5625.0], [21.3, 5625.0], [21.4, 5625.0], [21.5, 5631.0], [21.6, 5631.0], [21.7, 5631.0], [21.8, 5631.0], [21.9, 5631.0], [22.0, 5782.0], [22.1, 5782.0], [22.2, 5782.0], [22.3, 5782.0], [22.4, 5782.0], [22.5, 5792.0], [22.6, 5792.0], [22.7, 5792.0], [22.8, 5792.0], [22.9, 5792.0], [23.0, 6186.0], [23.1, 6186.0], [23.2, 6186.0], [23.3, 6186.0], [23.4, 6186.0], [23.5, 6255.0], [23.6, 6255.0], [23.7, 6255.0], [23.8, 6255.0], [23.9, 6255.0], [24.0, 6311.0], [24.1, 6311.0], [24.2, 6311.0], [24.3, 6311.0], [24.4, 6311.0], [24.5, 6348.0], [24.6, 6348.0], [24.7, 6348.0], [24.8, 6348.0], [24.9, 6348.0], [25.0, 6373.0], [25.1, 6373.0], [25.2, 6373.0], [25.3, 6373.0], [25.4, 6373.0], [25.5, 6399.0], [25.6, 6399.0], [25.7, 6399.0], [25.8, 6399.0], [25.9, 6399.0], [26.0, 6413.0], [26.1, 6413.0], [26.2, 6413.0], [26.3, 6413.0], [26.4, 6413.0], [26.5, 6445.0], [26.6, 6445.0], [26.7, 6445.0], [26.8, 6445.0], [26.9, 6445.0], [27.0, 6450.0], [27.1, 6450.0], [27.2, 6450.0], [27.3, 6450.0], [27.4, 6450.0], [27.5, 6458.0], [27.6, 6458.0], [27.7, 6458.0], [27.8, 6458.0], [27.9, 6458.0], [28.0, 6480.0], [28.1, 6480.0], [28.2, 6480.0], [28.3, 6480.0], [28.4, 6480.0], [28.5, 6499.0], [28.6, 6499.0], [28.7, 6499.0], [28.8, 6499.0], [28.9, 6499.0], [29.0, 6511.0], [29.1, 6511.0], [29.2, 6511.0], [29.3, 6511.0], [29.4, 6511.0], [29.5, 6518.0], [29.6, 6518.0], [29.7, 6518.0], [29.8, 6518.0], [29.9, 6518.0], [30.0, 6551.0], [30.1, 6551.0], [30.2, 6551.0], [30.3, 6551.0], [30.4, 6551.0], [30.5, 6554.0], [30.6, 6554.0], [30.7, 6554.0], [30.8, 6554.0], [30.9, 6554.0], [31.0, 6584.0], [31.1, 6584.0], [31.2, 6584.0], [31.3, 6584.0], [31.4, 6584.0], [31.5, 6592.0], [31.6, 6592.0], [31.7, 6592.0], [31.8, 6592.0], [31.9, 6592.0], [32.0, 6604.0], [32.1, 6604.0], [32.2, 6604.0], [32.3, 6604.0], [32.4, 6604.0], [32.5, 6702.0], [32.6, 6702.0], [32.7, 6702.0], [32.8, 6702.0], [32.9, 6702.0], [33.0, 6743.0], [33.1, 6743.0], [33.2, 6743.0], [33.3, 6743.0], [33.4, 6743.0], [33.5, 6980.0], [33.6, 6980.0], [33.7, 6980.0], [33.8, 6980.0], [33.9, 6980.0], [34.0, 7207.0], [34.1, 7207.0], [34.2, 7207.0], [34.3, 7207.0], [34.4, 7207.0], [34.5, 7262.0], [34.6, 7262.0], [34.7, 7262.0], [34.8, 7262.0], [34.9, 7262.0], [35.0, 7368.0], [35.1, 7368.0], [35.2, 7368.0], [35.3, 7368.0], [35.4, 7368.0], [35.5, 7370.0], [35.6, 7370.0], [35.7, 7370.0], [35.8, 7370.0], [35.9, 7370.0], [36.0, 7370.0], [36.1, 7370.0], [36.2, 7370.0], [36.3, 7370.0], [36.4, 7370.0], [36.5, 7384.0], [36.6, 7384.0], [36.7, 7384.0], [36.8, 7384.0], [36.9, 7384.0], [37.0, 7463.0], [37.1, 7463.0], [37.2, 7463.0], [37.3, 7463.0], [37.4, 7463.0], [37.5, 7479.0], [37.6, 7479.0], [37.7, 7479.0], [37.8, 7479.0], [37.9, 7479.0], [38.0, 7480.0], [38.1, 7480.0], [38.2, 7480.0], [38.3, 7480.0], [38.4, 7480.0], [38.5, 7486.0], [38.6, 7486.0], [38.7, 7486.0], [38.8, 7486.0], [38.9, 7486.0], [39.0, 7487.0], [39.1, 7487.0], [39.2, 7487.0], [39.3, 7487.0], [39.4, 7487.0], [39.5, 7524.0], [39.6, 7524.0], [39.7, 7524.0], [39.8, 7524.0], [39.9, 7524.0], [40.0, 7624.0], [40.1, 7624.0], [40.2, 7624.0], [40.3, 7624.0], [40.4, 7624.0], [40.5, 7670.0], [40.6, 7670.0], [40.7, 7670.0], [40.8, 7670.0], [40.9, 7670.0], [41.0, 7813.0], [41.1, 7813.0], [41.2, 7813.0], [41.3, 7813.0], [41.4, 7813.0], [41.5, 7816.0], [41.6, 7816.0], [41.7, 7816.0], [41.8, 7816.0], [41.9, 7816.0], [42.0, 7860.0], [42.1, 7860.0], [42.2, 7860.0], [42.3, 7860.0], [42.4, 7860.0], [42.5, 8093.0], [42.6, 8093.0], [42.7, 8093.0], [42.8, 8093.0], [42.9, 8093.0], [43.0, 8093.0], [43.1, 8093.0], [43.2, 8093.0], [43.3, 8093.0], [43.4, 8093.0], [43.5, 8154.0], [43.6, 8154.0], [43.7, 8154.0], [43.8, 8154.0], [43.9, 8154.0], [44.0, 8179.0], [44.1, 8179.0], [44.2, 8179.0], [44.3, 8179.0], [44.4, 8179.0], [44.5, 8208.0], [44.6, 8208.0], [44.7, 8208.0], [44.8, 8208.0], [44.9, 8208.0], [45.0, 8251.0], [45.1, 8251.0], [45.2, 8251.0], [45.3, 8251.0], [45.4, 8251.0], [45.5, 8326.0], [45.6, 8326.0], [45.7, 8326.0], [45.8, 8326.0], [45.9, 8326.0], [46.0, 8331.0], [46.1, 8331.0], [46.2, 8331.0], [46.3, 8331.0], [46.4, 8331.0], [46.5, 8348.0], [46.6, 8348.0], [46.7, 8348.0], [46.8, 8348.0], [46.9, 8348.0], [47.0, 8351.0], [47.1, 8351.0], [47.2, 8351.0], [47.3, 8351.0], [47.4, 8351.0], [47.5, 8362.0], [47.6, 8362.0], [47.7, 8362.0], [47.8, 8362.0], [47.9, 8362.0], [48.0, 8364.0], [48.1, 8364.0], [48.2, 8364.0], [48.3, 8364.0], [48.4, 8364.0], [48.5, 8386.0], [48.6, 8386.0], [48.7, 8386.0], [48.8, 8386.0], [48.9, 8386.0], [49.0, 8394.0], [49.1, 8394.0], [49.2, 8394.0], [49.3, 8394.0], [49.4, 8394.0], [49.5, 8403.0], [49.6, 8403.0], [49.7, 8403.0], [49.8, 8403.0], [49.9, 8403.0], [50.0, 8426.0], [50.1, 8426.0], [50.2, 8426.0], [50.3, 8426.0], [50.4, 8426.0], [50.5, 8443.0], [50.6, 8443.0], [50.7, 8443.0], [50.8, 8443.0], [50.9, 8443.0], [51.0, 8450.0], [51.1, 8450.0], [51.2, 8450.0], [51.3, 8450.0], [51.4, 8450.0], [51.5, 8463.0], [51.6, 8463.0], [51.7, 8463.0], [51.8, 8463.0], [51.9, 8463.0], [52.0, 8469.0], [52.1, 8469.0], [52.2, 8469.0], [52.3, 8469.0], [52.4, 8469.0], [52.5, 8471.0], [52.6, 8471.0], [52.7, 8471.0], [52.8, 8471.0], [52.9, 8471.0], [53.0, 8482.0], [53.1, 8482.0], [53.2, 8482.0], [53.3, 8482.0], [53.4, 8482.0], [53.5, 8485.0], [53.6, 8485.0], [53.7, 8485.0], [53.8, 8485.0], [53.9, 8485.0], [54.0, 8489.0], [54.1, 8489.0], [54.2, 8489.0], [54.3, 8489.0], [54.4, 8489.0], [54.5, 8546.0], [54.6, 8546.0], [54.7, 8546.0], [54.8, 8546.0], [54.9, 8546.0], [55.0, 8548.0], [55.1, 8548.0], [55.2, 8548.0], [55.3, 8548.0], [55.4, 8548.0], [55.5, 8562.0], [55.6, 8562.0], [55.7, 8562.0], [55.8, 8562.0], [55.9, 8562.0], [56.0, 8562.0], [56.1, 8562.0], [56.2, 8562.0], [56.3, 8562.0], [56.4, 8562.0], [56.5, 8569.0], [56.6, 8569.0], [56.7, 8569.0], [56.8, 8569.0], [56.9, 8569.0], [57.0, 8575.0], [57.1, 8575.0], [57.2, 8575.0], [57.3, 8575.0], [57.4, 8575.0], [57.5, 8600.0], [57.6, 8600.0], [57.7, 8600.0], [57.8, 8600.0], [57.9, 8600.0], [58.0, 8600.0], [58.1, 8600.0], [58.2, 8600.0], [58.3, 8600.0], [58.4, 8600.0], [58.5, 8609.0], [58.6, 8609.0], [58.7, 8609.0], [58.8, 8609.0], [58.9, 8609.0], [59.0, 8613.0], [59.1, 8613.0], [59.2, 8613.0], [59.3, 8613.0], [59.4, 8613.0], [59.5, 8628.0], [59.6, 8628.0], [59.7, 8628.0], [59.8, 8628.0], [59.9, 8628.0], [60.0, 8630.0], [60.1, 8630.0], [60.2, 8630.0], [60.3, 8630.0], [60.4, 8630.0], [60.5, 8659.0], [60.6, 8659.0], [60.7, 8659.0], [60.8, 8659.0], [60.9, 8659.0], [61.0, 8688.0], [61.1, 8688.0], [61.2, 8688.0], [61.3, 8688.0], [61.4, 8688.0], [61.5, 8717.0], [61.6, 8717.0], [61.7, 8717.0], [61.8, 8717.0], [61.9, 8717.0], [62.0, 8750.0], [62.1, 8750.0], [62.2, 8750.0], [62.3, 8750.0], [62.4, 8750.0], [62.5, 8759.0], [62.6, 8759.0], [62.7, 8759.0], [62.8, 8759.0], [62.9, 8759.0], [63.0, 8795.0], [63.1, 8795.0], [63.2, 8795.0], [63.3, 8795.0], [63.4, 8795.0], [63.5, 8814.0], [63.6, 8814.0], [63.7, 8814.0], [63.8, 8814.0], [63.9, 8814.0], [64.0, 8816.0], [64.1, 8816.0], [64.2, 8816.0], [64.3, 8816.0], [64.4, 8816.0], [64.5, 8823.0], [64.6, 8823.0], [64.7, 8823.0], [64.8, 8823.0], [64.9, 8823.0], [65.0, 9025.0], [65.1, 9025.0], [65.2, 9025.0], [65.3, 9025.0], [65.4, 9025.0], [65.5, 9071.0], [65.6, 9071.0], [65.7, 9071.0], [65.8, 9071.0], [65.9, 9071.0], [66.0, 9229.0], [66.1, 9229.0], [66.2, 9229.0], [66.3, 9229.0], [66.4, 9229.0], [66.5, 9323.0], [66.6, 9323.0], [66.7, 9323.0], [66.8, 9323.0], [66.9, 9323.0], [67.0, 9451.0], [67.1, 9451.0], [67.2, 9451.0], [67.3, 9451.0], [67.4, 9451.0], [67.5, 9617.0], [67.6, 9617.0], [67.7, 9617.0], [67.8, 9617.0], [67.9, 9617.0], [68.0, 9795.0], [68.1, 9795.0], [68.2, 9795.0], [68.3, 9795.0], [68.4, 9795.0], [68.5, 9893.0], [68.6, 9893.0], [68.7, 9893.0], [68.8, 9893.0], [68.9, 9893.0], [69.0, 9991.0], [69.1, 9991.0], [69.2, 9991.0], [69.3, 9991.0], [69.4, 9991.0], [69.5, 9996.0], [69.6, 9996.0], [69.7, 9996.0], [69.8, 9996.0], [69.9, 9996.0], [70.0, 10016.0], [70.1, 10016.0], [70.2, 10016.0], [70.3, 10016.0], [70.4, 10016.0], [70.5, 10018.0], [70.6, 10018.0], [70.7, 10018.0], [70.8, 10018.0], [70.9, 10018.0], [71.0, 10038.0], [71.1, 10038.0], [71.2, 10038.0], [71.3, 10038.0], [71.4, 10038.0], [71.5, 10070.0], [71.6, 10070.0], [71.7, 10070.0], [71.8, 10070.0], [71.9, 10070.0], [72.0, 10090.0], [72.1, 10090.0], [72.2, 10090.0], [72.3, 10090.0], [72.4, 10090.0], [72.5, 10098.0], [72.6, 10098.0], [72.7, 10098.0], [72.8, 10098.0], [72.9, 10098.0], [73.0, 10126.0], [73.1, 10126.0], [73.2, 10126.0], [73.3, 10126.0], [73.4, 10126.0], [73.5, 10148.0], [73.6, 10148.0], [73.7, 10148.0], [73.8, 10148.0], [73.9, 10148.0], [74.0, 10150.0], [74.1, 10150.0], [74.2, 10150.0], [74.3, 10150.0], [74.4, 10150.0], [74.5, 10161.0], [74.6, 10161.0], [74.7, 10161.0], [74.8, 10161.0], [74.9, 10161.0], [75.0, 10213.0], [75.1, 10213.0], [75.2, 10213.0], [75.3, 10213.0], [75.4, 10213.0], [75.5, 10223.0], [75.6, 10223.0], [75.7, 10223.0], [75.8, 10223.0], [75.9, 10223.0], [76.0, 10232.0], [76.1, 10232.0], [76.2, 10232.0], [76.3, 10232.0], [76.4, 10232.0], [76.5, 10305.0], [76.6, 10305.0], [76.7, 10305.0], [76.8, 10305.0], [76.9, 10305.0], [77.0, 10336.0], [77.1, 10336.0], [77.2, 10336.0], [77.3, 10336.0], [77.4, 10336.0], [77.5, 10350.0], [77.6, 10350.0], [77.7, 10350.0], [77.8, 10350.0], [77.9, 10350.0], [78.0, 10421.0], [78.1, 10421.0], [78.2, 10421.0], [78.3, 10421.0], [78.4, 10421.0], [78.5, 10436.0], [78.6, 10436.0], [78.7, 10436.0], [78.8, 10436.0], [78.9, 10436.0], [79.0, 10451.0], [79.1, 10451.0], [79.2, 10451.0], [79.3, 10451.0], [79.4, 10451.0], [79.5, 10515.0], [79.6, 10515.0], [79.7, 10515.0], [79.8, 10515.0], [79.9, 10515.0], [80.0, 10531.0], [80.1, 10531.0], [80.2, 10531.0], [80.3, 10531.0], [80.4, 10531.0], [80.5, 10535.0], [80.6, 10535.0], [80.7, 10535.0], [80.8, 10535.0], [80.9, 10535.0], [81.0, 10745.0], [81.1, 10745.0], [81.2, 10745.0], [81.3, 10745.0], [81.4, 10745.0], [81.5, 10840.0], [81.6, 10840.0], [81.7, 10840.0], [81.8, 10840.0], [81.9, 10840.0], [82.0, 10849.0], [82.1, 10849.0], [82.2, 10849.0], [82.3, 10849.0], [82.4, 10849.0], [82.5, 10865.0], [82.6, 10865.0], [82.7, 10865.0], [82.8, 10865.0], [82.9, 10865.0], [83.0, 10879.0], [83.1, 10879.0], [83.2, 10879.0], [83.3, 10879.0], [83.4, 10879.0], [83.5, 11058.0], [83.6, 11058.0], [83.7, 11058.0], [83.8, 11058.0], [83.9, 11058.0], [84.0, 11066.0], [84.1, 11066.0], [84.2, 11066.0], [84.3, 11066.0], [84.4, 11066.0], [84.5, 11079.0], [84.6, 11079.0], [84.7, 11079.0], [84.8, 11079.0], [84.9, 11079.0], [85.0, 11092.0], [85.1, 11092.0], [85.2, 11092.0], [85.3, 11092.0], [85.4, 11092.0], [85.5, 11135.0], [85.6, 11135.0], [85.7, 11135.0], [85.8, 11135.0], [85.9, 11135.0], [86.0, 11161.0], [86.1, 11161.0], [86.2, 11161.0], [86.3, 11161.0], [86.4, 11161.0], [86.5, 11167.0], [86.6, 11167.0], [86.7, 11167.0], [86.8, 11167.0], [86.9, 11167.0], [87.0, 11242.0], [87.1, 11242.0], [87.2, 11242.0], [87.3, 11242.0], [87.4, 11242.0], [87.5, 11244.0], [87.6, 11244.0], [87.7, 11244.0], [87.8, 11244.0], [87.9, 11244.0], [88.0, 11251.0], [88.1, 11251.0], [88.2, 11251.0], [88.3, 11251.0], [88.4, 11251.0], [88.5, 11279.0], [88.6, 11279.0], [88.7, 11279.0], [88.8, 11279.0], [88.9, 11279.0], [89.0, 11351.0], [89.1, 11351.0], [89.2, 11351.0], [89.3, 11351.0], [89.4, 11351.0], [89.5, 11364.0], [89.6, 11364.0], [89.7, 11364.0], [89.8, 11364.0], [89.9, 11364.0], [90.0, 11398.0], [90.1, 11398.0], [90.2, 11398.0], [90.3, 11398.0], [90.4, 11398.0], [90.5, 11434.0], [90.6, 11434.0], [90.7, 11434.0], [90.8, 11434.0], [90.9, 11434.0], [91.0, 11446.0], [91.1, 11446.0], [91.2, 11446.0], [91.3, 11446.0], [91.4, 11446.0], [91.5, 11461.0], [91.6, 11461.0], [91.7, 11461.0], [91.8, 11461.0], [91.9, 11461.0], [92.0, 11499.0], [92.1, 11499.0], [92.2, 11499.0], [92.3, 11499.0], [92.4, 11499.0], [92.5, 11549.0], [92.6, 11549.0], [92.7, 11549.0], [92.8, 11549.0], [92.9, 11549.0], [93.0, 11634.0], [93.1, 11634.0], [93.2, 11634.0], [93.3, 11634.0], [93.4, 11634.0], [93.5, 11940.0], [93.6, 11940.0], [93.7, 11940.0], [93.8, 11940.0], [93.9, 11940.0], [94.0, 11982.0], [94.1, 11982.0], [94.2, 11982.0], [94.3, 11982.0], [94.4, 11982.0], [94.5, 11988.0], [94.6, 11988.0], [94.7, 11988.0], [94.8, 11988.0], [94.9, 11988.0], [95.0, 12131.0], [95.1, 12131.0], [95.2, 12131.0], [95.3, 12131.0], [95.4, 12131.0], [95.5, 12284.0], [95.6, 12284.0], [95.7, 12284.0], [95.8, 12284.0], [95.9, 12284.0], [96.0, 12457.0], [96.1, 12457.0], [96.2, 12457.0], [96.3, 12457.0], [96.4, 12457.0], [96.5, 12489.0], [96.6, 12489.0], [96.7, 12489.0], [96.8, 12489.0], [96.9, 12489.0], [97.0, 12592.0], [97.1, 12592.0], [97.2, 12592.0], [97.3, 12592.0], [97.4, 12592.0], [97.5, 12720.0], [97.6, 12720.0], [97.7, 12720.0], [97.8, 12720.0], [97.9, 12720.0], [98.0, 12790.0], [98.1, 12790.0], [98.2, 12790.0], [98.3, 12790.0], [98.4, 12790.0], [98.5, 12797.0], [98.6, 12797.0], [98.7, 12797.0], [98.8, 12797.0], [98.9, 12797.0], [99.0, 13017.0], [99.1, 13017.0], [99.2, 13017.0], [99.3, 13017.0], [99.4, 13017.0], [99.5, 13038.0], [99.6, 13038.0], [99.7, 13038.0], [99.8, 13038.0], [99.9, 13038.0]], "isOverall": false, "label": "HTTP 要求: Step3: Change Avatar", "isController": false}, {"data": [[0.0, 77.0], [0.1, 77.0], [0.2, 77.0], [0.3, 77.0], [0.4, 77.0], [0.5, 78.0], [0.6, 78.0], [0.7, 78.0], [0.8, 78.0], [0.9, 78.0], [1.0, 78.0], [1.1, 78.0], [1.2, 78.0], [1.3, 78.0], [1.4, 78.0], [1.5, 93.0], [1.6, 93.0], [1.7, 93.0], [1.8, 93.0], [1.9, 93.0], [2.0, 138.0], [2.1, 138.0], [2.2, 138.0], [2.3, 138.0], [2.4, 138.0], [2.5, 143.0], [2.6, 143.0], [2.7, 143.0], [2.8, 143.0], [2.9, 143.0], [3.0, 147.0], [3.1, 147.0], [3.2, 147.0], [3.3, 147.0], [3.4, 147.0], [3.5, 164.0], [3.6, 164.0], [3.7, 164.0], [3.8, 164.0], [3.9, 164.0], [4.0, 170.0], [4.1, 170.0], [4.2, 170.0], [4.3, 170.0], [4.4, 170.0], [4.5, 180.0], [4.6, 180.0], [4.7, 180.0], [4.8, 180.0], [4.9, 180.0], [5.0, 199.0], [5.1, 199.0], [5.2, 199.0], [5.3, 199.0], [5.4, 199.0], [5.5, 203.0], [5.6, 203.0], [5.7, 203.0], [5.8, 203.0], [5.9, 203.0], [6.0, 217.0], [6.1, 217.0], [6.2, 217.0], [6.3, 217.0], [6.4, 217.0], [6.5, 219.0], [6.6, 219.0], [6.7, 219.0], [6.8, 219.0], [6.9, 219.0], [7.0, 230.0], [7.1, 230.0], [7.2, 230.0], [7.3, 230.0], [7.4, 230.0], [7.5, 231.0], [7.6, 231.0], [7.7, 231.0], [7.8, 231.0], [7.9, 231.0], [8.0, 241.0], [8.1, 241.0], [8.2, 241.0], [8.3, 241.0], [8.4, 241.0], [8.5, 247.0], [8.6, 247.0], [8.7, 247.0], [8.8, 247.0], [8.9, 247.0], [9.0, 248.0], [9.1, 248.0], [9.2, 248.0], [9.3, 248.0], [9.4, 248.0], [9.5, 251.0], [9.6, 251.0], [9.7, 251.0], [9.8, 251.0], [9.9, 251.0], [10.0, 252.0], [10.1, 252.0], [10.2, 252.0], [10.3, 252.0], [10.4, 252.0], [10.5, 260.0], [10.6, 260.0], [10.7, 260.0], [10.8, 260.0], [10.9, 260.0], [11.0, 265.0], [11.1, 265.0], [11.2, 265.0], [11.3, 265.0], [11.4, 265.0], [11.5, 266.0], [11.6, 266.0], [11.7, 266.0], [11.8, 266.0], [11.9, 266.0], [12.0, 277.0], [12.1, 277.0], [12.2, 277.0], [12.3, 277.0], [12.4, 277.0], [12.5, 278.0], [12.6, 278.0], [12.7, 278.0], [12.8, 278.0], [12.9, 278.0], [13.0, 280.0], [13.1, 280.0], [13.2, 280.0], [13.3, 280.0], [13.4, 280.0], [13.5, 289.0], [13.6, 289.0], [13.7, 289.0], [13.8, 289.0], [13.9, 289.0], [14.0, 290.0], [14.1, 290.0], [14.2, 290.0], [14.3, 290.0], [14.4, 290.0], [14.5, 293.0], [14.6, 293.0], [14.7, 293.0], [14.8, 293.0], [14.9, 293.0], [15.0, 293.0], [15.1, 293.0], [15.2, 293.0], [15.3, 293.0], [15.4, 293.0], [15.5, 293.0], [15.6, 293.0], [15.7, 293.0], [15.8, 293.0], [15.9, 293.0], [16.0, 304.0], [16.1, 304.0], [16.2, 304.0], [16.3, 304.0], [16.4, 304.0], [16.5, 321.0], [16.6, 321.0], [16.7, 321.0], [16.8, 321.0], [16.9, 321.0], [17.0, 323.0], [17.1, 323.0], [17.2, 323.0], [17.3, 323.0], [17.4, 323.0], [17.5, 325.0], [17.6, 325.0], [17.7, 325.0], [17.8, 325.0], [17.9, 325.0], [18.0, 332.0], [18.1, 332.0], [18.2, 332.0], [18.3, 332.0], [18.4, 332.0], [18.5, 354.0], [18.6, 354.0], [18.7, 354.0], [18.8, 354.0], [18.9, 354.0], [19.0, 354.0], [19.1, 354.0], [19.2, 354.0], [19.3, 354.0], [19.4, 354.0], [19.5, 356.0], [19.6, 356.0], [19.7, 356.0], [19.8, 356.0], [19.9, 356.0], [20.0, 363.0], [20.1, 363.0], [20.2, 363.0], [20.3, 363.0], [20.4, 363.0], [20.5, 369.0], [20.6, 369.0], [20.7, 369.0], [20.8, 369.0], [20.9, 369.0], [21.0, 375.0], [21.1, 375.0], [21.2, 375.0], [21.3, 375.0], [21.4, 375.0], [21.5, 379.0], [21.6, 379.0], [21.7, 379.0], [21.8, 379.0], [21.9, 379.0], [22.0, 389.0], [22.1, 389.0], [22.2, 389.0], [22.3, 389.0], [22.4, 389.0], [22.5, 390.0], [22.6, 390.0], [22.7, 390.0], [22.8, 390.0], [22.9, 390.0], [23.0, 390.0], [23.1, 390.0], [23.2, 390.0], [23.3, 390.0], [23.4, 390.0], [23.5, 390.0], [23.6, 390.0], [23.7, 390.0], [23.8, 390.0], [23.9, 390.0], [24.0, 395.0], [24.1, 395.0], [24.2, 395.0], [24.3, 395.0], [24.4, 395.0], [24.5, 400.0], [24.6, 400.0], [24.7, 400.0], [24.8, 400.0], [24.9, 400.0], [25.0, 406.0], [25.1, 406.0], [25.2, 406.0], [25.3, 406.0], [25.4, 406.0], [25.5, 406.0], [25.6, 406.0], [25.7, 406.0], [25.8, 406.0], [25.9, 406.0], [26.0, 409.0], [26.1, 409.0], [26.2, 409.0], [26.3, 409.0], [26.4, 409.0], [26.5, 411.0], [26.6, 411.0], [26.7, 411.0], [26.8, 411.0], [26.9, 411.0], [27.0, 418.0], [27.1, 418.0], [27.2, 418.0], [27.3, 418.0], [27.4, 418.0], [27.5, 424.0], [27.6, 424.0], [27.7, 424.0], [27.8, 424.0], [27.9, 424.0], [28.0, 428.0], [28.1, 428.0], [28.2, 428.0], [28.3, 428.0], [28.4, 428.0], [28.5, 431.0], [28.6, 431.0], [28.7, 431.0], [28.8, 431.0], [28.9, 431.0], [29.0, 432.0], [29.1, 432.0], [29.2, 432.0], [29.3, 432.0], [29.4, 432.0], [29.5, 433.0], [29.6, 433.0], [29.7, 433.0], [29.8, 433.0], [29.9, 433.0], [30.0, 468.0], [30.1, 468.0], [30.2, 468.0], [30.3, 468.0], [30.4, 468.0], [30.5, 478.0], [30.6, 478.0], [30.7, 478.0], [30.8, 478.0], [30.9, 478.0], [31.0, 485.0], [31.1, 485.0], [31.2, 485.0], [31.3, 485.0], [31.4, 485.0], [31.5, 485.0], [31.6, 485.0], [31.7, 485.0], [31.8, 485.0], [31.9, 485.0], [32.0, 488.0], [32.1, 488.0], [32.2, 488.0], [32.3, 488.0], [32.4, 488.0], [32.5, 511.0], [32.6, 511.0], [32.7, 511.0], [32.8, 511.0], [32.9, 511.0], [33.0, 515.0], [33.1, 515.0], [33.2, 515.0], [33.3, 515.0], [33.4, 515.0], [33.5, 520.0], [33.6, 520.0], [33.7, 520.0], [33.8, 520.0], [33.9, 520.0], [34.0, 524.0], [34.1, 524.0], [34.2, 524.0], [34.3, 524.0], [34.4, 524.0], [34.5, 534.0], [34.6, 534.0], [34.7, 534.0], [34.8, 534.0], [34.9, 534.0], [35.0, 554.0], [35.1, 554.0], [35.2, 554.0], [35.3, 554.0], [35.4, 554.0], [35.5, 569.0], [35.6, 569.0], [35.7, 569.0], [35.8, 569.0], [35.9, 569.0], [36.0, 575.0], [36.1, 575.0], [36.2, 575.0], [36.3, 575.0], [36.4, 575.0], [36.5, 576.0], [36.6, 576.0], [36.7, 576.0], [36.8, 576.0], [36.9, 576.0], [37.0, 577.0], [37.1, 577.0], [37.2, 577.0], [37.3, 577.0], [37.4, 577.0], [37.5, 604.0], [37.6, 604.0], [37.7, 604.0], [37.8, 604.0], [37.9, 604.0], [38.0, 616.0], [38.1, 616.0], [38.2, 616.0], [38.3, 616.0], [38.4, 616.0], [38.5, 630.0], [38.6, 630.0], [38.7, 630.0], [38.8, 630.0], [38.9, 630.0], [39.0, 660.0], [39.1, 660.0], [39.2, 660.0], [39.3, 660.0], [39.4, 660.0], [39.5, 671.0], [39.6, 671.0], [39.7, 671.0], [39.8, 671.0], [39.9, 671.0], [40.0, 678.0], [40.1, 678.0], [40.2, 678.0], [40.3, 678.0], [40.4, 678.0], [40.5, 689.0], [40.6, 689.0], [40.7, 689.0], [40.8, 689.0], [40.9, 689.0], [41.0, 744.0], [41.1, 744.0], [41.2, 744.0], [41.3, 744.0], [41.4, 744.0], [41.5, 755.0], [41.6, 755.0], [41.7, 755.0], [41.8, 755.0], [41.9, 755.0], [42.0, 780.0], [42.1, 780.0], [42.2, 780.0], [42.3, 780.0], [42.4, 780.0], [42.5, 782.0], [42.6, 782.0], [42.7, 782.0], [42.8, 782.0], [42.9, 782.0], [43.0, 792.0], [43.1, 792.0], [43.2, 792.0], [43.3, 792.0], [43.4, 792.0], [43.5, 811.0], [43.6, 811.0], [43.7, 811.0], [43.8, 811.0], [43.9, 811.0], [44.0, 837.0], [44.1, 837.0], [44.2, 837.0], [44.3, 837.0], [44.4, 837.0], [44.5, 846.0], [44.6, 846.0], [44.7, 846.0], [44.8, 846.0], [44.9, 846.0], [45.0, 863.0], [45.1, 863.0], [45.2, 863.0], [45.3, 863.0], [45.4, 863.0], [45.5, 868.0], [45.6, 868.0], [45.7, 868.0], [45.8, 868.0], [45.9, 868.0], [46.0, 869.0], [46.1, 869.0], [46.2, 869.0], [46.3, 869.0], [46.4, 869.0], [46.5, 886.0], [46.6, 886.0], [46.7, 886.0], [46.8, 886.0], [46.9, 886.0], [47.0, 892.0], [47.1, 892.0], [47.2, 892.0], [47.3, 892.0], [47.4, 892.0], [47.5, 898.0], [47.6, 898.0], [47.7, 898.0], [47.8, 898.0], [47.9, 898.0], [48.0, 982.0], [48.1, 982.0], [48.2, 982.0], [48.3, 982.0], [48.4, 982.0], [48.5, 988.0], [48.6, 988.0], [48.7, 988.0], [48.8, 988.0], [48.9, 988.0], [49.0, 988.0], [49.1, 988.0], [49.2, 988.0], [49.3, 988.0], [49.4, 988.0], [49.5, 1031.0], [49.6, 1031.0], [49.7, 1031.0], [49.8, 1031.0], [49.9, 1031.0], [50.0, 1039.0], [50.1, 1039.0], [50.2, 1039.0], [50.3, 1039.0], [50.4, 1039.0], [50.5, 1043.0], [50.6, 1043.0], [50.7, 1043.0], [50.8, 1043.0], [50.9, 1043.0], [51.0, 1046.0], [51.1, 1046.0], [51.2, 1046.0], [51.3, 1046.0], [51.4, 1046.0], [51.5, 1046.0], [51.6, 1046.0], [51.7, 1046.0], [51.8, 1046.0], [51.9, 1046.0], [52.0, 1050.0], [52.1, 1050.0], [52.2, 1050.0], [52.3, 1050.0], [52.4, 1050.0], [52.5, 1071.0], [52.6, 1071.0], [52.7, 1071.0], [52.8, 1071.0], [52.9, 1071.0], [53.0, 1085.0], [53.1, 1085.0], [53.2, 1085.0], [53.3, 1085.0], [53.4, 1085.0], [53.5, 1098.0], [53.6, 1098.0], [53.7, 1098.0], [53.8, 1098.0], [53.9, 1098.0], [54.0, 1141.0], [54.1, 1141.0], [54.2, 1141.0], [54.3, 1141.0], [54.4, 1141.0], [54.5, 1142.0], [54.6, 1142.0], [54.7, 1142.0], [54.8, 1142.0], [54.9, 1142.0], [55.0, 1161.0], [55.1, 1161.0], [55.2, 1161.0], [55.3, 1161.0], [55.4, 1161.0], [55.5, 1170.0], [55.6, 1170.0], [55.7, 1170.0], [55.8, 1170.0], [55.9, 1170.0], [56.0, 1205.0], [56.1, 1205.0], [56.2, 1205.0], [56.3, 1205.0], [56.4, 1205.0], [56.5, 1232.0], [56.6, 1232.0], [56.7, 1232.0], [56.8, 1232.0], [56.9, 1232.0], [57.0, 1258.0], [57.1, 1258.0], [57.2, 1258.0], [57.3, 1258.0], [57.4, 1258.0], [57.5, 1264.0], [57.6, 1264.0], [57.7, 1264.0], [57.8, 1264.0], [57.9, 1264.0], [58.0, 1308.0], [58.1, 1308.0], [58.2, 1308.0], [58.3, 1308.0], [58.4, 1308.0], [58.5, 1336.0], [58.6, 1336.0], [58.7, 1336.0], [58.8, 1336.0], [58.9, 1336.0], [59.0, 1353.0], [59.1, 1353.0], [59.2, 1353.0], [59.3, 1353.0], [59.4, 1353.0], [59.5, 1416.0], [59.6, 1416.0], [59.7, 1416.0], [59.8, 1416.0], [59.9, 1416.0], [60.0, 1442.0], [60.1, 1442.0], [60.2, 1442.0], [60.3, 1442.0], [60.4, 1442.0], [60.5, 1470.0], [60.6, 1470.0], [60.7, 1470.0], [60.8, 1470.0], [60.9, 1470.0], [61.0, 1547.0], [61.1, 1547.0], [61.2, 1547.0], [61.3, 1547.0], [61.4, 1547.0], [61.5, 1626.0], [61.6, 1626.0], [61.7, 1626.0], [61.8, 1626.0], [61.9, 1626.0], [62.0, 1640.0], [62.1, 1640.0], [62.2, 1640.0], [62.3, 1640.0], [62.4, 1640.0], [62.5, 1650.0], [62.6, 1650.0], [62.7, 1650.0], [62.8, 1650.0], [62.9, 1650.0], [63.0, 1664.0], [63.1, 1664.0], [63.2, 1664.0], [63.3, 1664.0], [63.4, 1664.0], [63.5, 1690.0], [63.6, 1690.0], [63.7, 1690.0], [63.8, 1690.0], [63.9, 1690.0], [64.0, 1709.0], [64.1, 1709.0], [64.2, 1709.0], [64.3, 1709.0], [64.4, 1709.0], [64.5, 1824.0], [64.6, 1824.0], [64.7, 1824.0], [64.8, 1824.0], [64.9, 1824.0], [65.0, 1865.0], [65.1, 1865.0], [65.2, 1865.0], [65.3, 1865.0], [65.4, 1865.0], [65.5, 1904.0], [65.6, 1904.0], [65.7, 1904.0], [65.8, 1904.0], [65.9, 1904.0], [66.0, 1911.0], [66.1, 1911.0], [66.2, 1911.0], [66.3, 1911.0], [66.4, 1911.0], [66.5, 1922.0], [66.6, 1922.0], [66.7, 1922.0], [66.8, 1922.0], [66.9, 1922.0], [67.0, 1942.0], [67.1, 1942.0], [67.2, 1942.0], [67.3, 1942.0], [67.4, 1942.0], [67.5, 2011.0], [67.6, 2011.0], [67.7, 2011.0], [67.8, 2011.0], [67.9, 2011.0], [68.0, 2081.0], [68.1, 2081.0], [68.2, 2081.0], [68.3, 2081.0], [68.4, 2081.0], [68.5, 2161.0], [68.6, 2161.0], [68.7, 2161.0], [68.8, 2161.0], [68.9, 2161.0], [69.0, 2188.0], [69.1, 2188.0], [69.2, 2188.0], [69.3, 2188.0], [69.4, 2188.0], [69.5, 2254.0], [69.6, 2254.0], [69.7, 2254.0], [69.8, 2254.0], [69.9, 2254.0], [70.0, 2322.0], [70.1, 2322.0], [70.2, 2322.0], [70.3, 2322.0], [70.4, 2322.0], [70.5, 2557.0], [70.6, 2557.0], [70.7, 2557.0], [70.8, 2557.0], [70.9, 2557.0], [71.0, 2559.0], [71.1, 2559.0], [71.2, 2559.0], [71.3, 2559.0], [71.4, 2559.0], [71.5, 2591.0], [71.6, 2591.0], [71.7, 2591.0], [71.8, 2591.0], [71.9, 2591.0], [72.0, 2636.0], [72.1, 2636.0], [72.2, 2636.0], [72.3, 2636.0], [72.4, 2636.0], [72.5, 2727.0], [72.6, 2727.0], [72.7, 2727.0], [72.8, 2727.0], [72.9, 2727.0], [73.0, 2755.0], [73.1, 2755.0], [73.2, 2755.0], [73.3, 2755.0], [73.4, 2755.0], [73.5, 2793.0], [73.6, 2793.0], [73.7, 2793.0], [73.8, 2793.0], [73.9, 2793.0], [74.0, 2806.0], [74.1, 2806.0], [74.2, 2806.0], [74.3, 2806.0], [74.4, 2806.0], [74.5, 2849.0], [74.6, 2849.0], [74.7, 2849.0], [74.8, 2849.0], [74.9, 2849.0], [75.0, 2863.0], [75.1, 2863.0], [75.2, 2863.0], [75.3, 2863.0], [75.4, 2863.0], [75.5, 2894.0], [75.6, 2894.0], [75.7, 2894.0], [75.8, 2894.0], [75.9, 2894.0], [76.0, 2903.0], [76.1, 2903.0], [76.2, 2903.0], [76.3, 2903.0], [76.4, 2903.0], [76.5, 2906.0], [76.6, 2906.0], [76.7, 2906.0], [76.8, 2906.0], [76.9, 2906.0], [77.0, 2909.0], [77.1, 2909.0], [77.2, 2909.0], [77.3, 2909.0], [77.4, 2909.0], [77.5, 2933.0], [77.6, 2933.0], [77.7, 2933.0], [77.8, 2933.0], [77.9, 2933.0], [78.0, 2952.0], [78.1, 2952.0], [78.2, 2952.0], [78.3, 2952.0], [78.4, 2952.0], [78.5, 2963.0], [78.6, 2963.0], [78.7, 2963.0], [78.8, 2963.0], [78.9, 2963.0], [79.0, 2989.0], [79.1, 2989.0], [79.2, 2989.0], [79.3, 2989.0], [79.4, 2989.0], [79.5, 2990.0], [79.6, 2990.0], [79.7, 2990.0], [79.8, 2990.0], [79.9, 2990.0], [80.0, 2996.0], [80.1, 2996.0], [80.2, 2996.0], [80.3, 2996.0], [80.4, 2996.0], [80.5, 3013.0], [80.6, 3013.0], [80.7, 3013.0], [80.8, 3013.0], [80.9, 3013.0], [81.0, 3052.0], [81.1, 3052.0], [81.2, 3052.0], [81.3, 3052.0], [81.4, 3052.0], [81.5, 3059.0], [81.6, 3059.0], [81.7, 3059.0], [81.8, 3059.0], [81.9, 3059.0], [82.0, 3059.0], [82.1, 3059.0], [82.2, 3059.0], [82.3, 3059.0], [82.4, 3059.0], [82.5, 3062.0], [82.6, 3062.0], [82.7, 3062.0], [82.8, 3062.0], [82.9, 3062.0], [83.0, 3121.0], [83.1, 3121.0], [83.2, 3121.0], [83.3, 3121.0], [83.4, 3121.0], [83.5, 3130.0], [83.6, 3130.0], [83.7, 3130.0], [83.8, 3130.0], [83.9, 3130.0], [84.0, 3133.0], [84.1, 3133.0], [84.2, 3133.0], [84.3, 3133.0], [84.4, 3133.0], [84.5, 3173.0], [84.6, 3173.0], [84.7, 3173.0], [84.8, 3173.0], [84.9, 3173.0], [85.0, 3296.0], [85.1, 3296.0], [85.2, 3296.0], [85.3, 3296.0], [85.4, 3296.0], [85.5, 3350.0], [85.6, 3350.0], [85.7, 3350.0], [85.8, 3350.0], [85.9, 3350.0], [86.0, 3541.0], [86.1, 3541.0], [86.2, 3541.0], [86.3, 3541.0], [86.4, 3541.0], [86.5, 3562.0], [86.6, 3562.0], [86.7, 3562.0], [86.8, 3562.0], [86.9, 3562.0], [87.0, 3578.0], [87.1, 3578.0], [87.2, 3578.0], [87.3, 3578.0], [87.4, 3578.0], [87.5, 3622.0], [87.6, 3622.0], [87.7, 3622.0], [87.8, 3622.0], [87.9, 3622.0], [88.0, 3634.0], [88.1, 3634.0], [88.2, 3634.0], [88.3, 3634.0], [88.4, 3634.0], [88.5, 3645.0], [88.6, 3645.0], [88.7, 3645.0], [88.8, 3645.0], [88.9, 3645.0], [89.0, 3726.0], [89.1, 3726.0], [89.2, 3726.0], [89.3, 3726.0], [89.4, 3726.0], [89.5, 3750.0], [89.6, 3750.0], [89.7, 3750.0], [89.8, 3750.0], [89.9, 3750.0], [90.0, 3810.0], [90.1, 3810.0], [90.2, 3810.0], [90.3, 3810.0], [90.4, 3810.0], [90.5, 3812.0], [90.6, 3812.0], [90.7, 3812.0], [90.8, 3812.0], [90.9, 3812.0], [91.0, 4739.0], [91.1, 4739.0], [91.2, 4739.0], [91.3, 4739.0], [91.4, 4739.0], [91.5, 5198.0], [91.6, 5198.0], [91.7, 5198.0], [91.8, 5198.0], [91.9, 5198.0], [92.0, 5430.0], [92.1, 5430.0], [92.2, 5430.0], [92.3, 5430.0], [92.4, 5430.0], [92.5, 6135.0], [92.6, 6135.0], [92.7, 6135.0], [92.8, 6135.0], [92.9, 6135.0], [93.0, 6356.0], [93.1, 6356.0], [93.2, 6356.0], [93.3, 6356.0], [93.4, 6356.0], [93.5, 6533.0], [93.6, 6533.0], [93.7, 6533.0], [93.8, 6533.0], [93.9, 6533.0], [94.0, 6913.0], [94.1, 6913.0], [94.2, 6913.0], [94.3, 6913.0], [94.4, 6913.0], [94.5, 7041.0], [94.6, 7041.0], [94.7, 7041.0], [94.8, 7041.0], [94.9, 7041.0], [95.0, 7295.0], [95.1, 7295.0], [95.2, 7295.0], [95.3, 7295.0], [95.4, 7295.0], [95.5, 7611.0], [95.6, 7611.0], [95.7, 7611.0], [95.8, 7611.0], [95.9, 7611.0], [96.0, 7615.0], [96.1, 7615.0], [96.2, 7615.0], [96.3, 7615.0], [96.4, 7615.0], [96.5, 8331.0], [96.6, 8331.0], [96.7, 8331.0], [96.8, 8331.0], [96.9, 8331.0], [97.0, 8348.0], [97.1, 8348.0], [97.2, 8348.0], [97.3, 8348.0], [97.4, 8348.0], [97.5, 8473.0], [97.6, 8473.0], [97.7, 8473.0], [97.8, 8473.0], [97.9, 8473.0], [98.0, 8527.0], [98.1, 8527.0], [98.2, 8527.0], [98.3, 8527.0], [98.4, 8527.0], [98.5, 8818.0], [98.6, 8818.0], [98.7, 8818.0], [98.8, 8818.0], [98.9, 8818.0], [99.0, 8963.0], [99.1, 8963.0], [99.2, 8963.0], [99.3, 8963.0], [99.4, 8963.0], [99.5, 11803.0], [99.6, 11803.0], [99.7, 11803.0], [99.8, 11803.0], [99.9, 11803.0]], "isOverall": false, "label": "HTTP 要求: Step2: Profile", "isController": false}, {"data": [[0.0, 16365.0], [0.1, 16365.0], [0.2, 16365.0], [0.3, 16365.0], [0.4, 16365.0], [0.5, 16423.0], [0.6, 16423.0], [0.7, 16423.0], [0.8, 16423.0], [0.9, 16423.0], [1.0, 16482.0], [1.1, 16482.0], [1.2, 16482.0], [1.3, 16482.0], [1.4, 16482.0], [1.5, 16525.0], [1.6, 16525.0], [1.7, 16525.0], [1.8, 16525.0], [1.9, 16525.0], [2.0, 16529.0], [2.1, 16529.0], [2.2, 16529.0], [2.3, 16529.0], [2.4, 16529.0], [2.5, 16544.0], [2.6, 16544.0], [2.7, 16544.0], [2.8, 16544.0], [2.9, 16544.0], [3.0, 16545.0], [3.1, 16545.0], [3.2, 16545.0], [3.3, 16545.0], [3.4, 16545.0], [3.5, 16556.0], [3.6, 16556.0], [3.7, 16556.0], [3.8, 16556.0], [3.9, 16556.0], [4.0, 16565.0], [4.1, 16565.0], [4.2, 16565.0], [4.3, 16565.0], [4.4, 16565.0], [4.5, 16575.0], [4.6, 16575.0], [4.7, 16575.0], [4.8, 16575.0], [4.9, 16575.0], [5.0, 16621.0], [5.1, 16621.0], [5.2, 16621.0], [5.3, 16621.0], [5.4, 16621.0], [5.5, 16623.0], [5.6, 16623.0], [5.7, 16623.0], [5.8, 16623.0], [5.9, 16623.0], [6.0, 16626.0], [6.1, 16626.0], [6.2, 16626.0], [6.3, 16626.0], [6.4, 16626.0], [6.5, 16642.0], [6.6, 16642.0], [6.7, 16642.0], [6.8, 16642.0], [6.9, 16642.0], [7.0, 16670.0], [7.1, 16670.0], [7.2, 16670.0], [7.3, 16670.0], [7.4, 16670.0], [7.5, 16671.0], [7.6, 16671.0], [7.7, 16671.0], [7.8, 16671.0], [7.9, 16671.0], [8.0, 16684.0], [8.1, 16684.0], [8.2, 16684.0], [8.3, 16684.0], [8.4, 16684.0], [8.5, 16699.0], [8.6, 16699.0], [8.7, 16699.0], [8.8, 16699.0], [8.9, 16699.0], [9.0, 16702.0], [9.1, 16702.0], [9.2, 16702.0], [9.3, 16702.0], [9.4, 16702.0], [9.5, 16706.0], [9.6, 16706.0], [9.7, 16706.0], [9.8, 16706.0], [9.9, 16706.0], [10.0, 16706.0], [10.1, 16706.0], [10.2, 16706.0], [10.3, 16706.0], [10.4, 16706.0], [10.5, 16711.0], [10.6, 16711.0], [10.7, 16711.0], [10.8, 16711.0], [10.9, 16711.0], [11.0, 16730.0], [11.1, 16730.0], [11.2, 16730.0], [11.3, 16730.0], [11.4, 16730.0], [11.5, 16738.0], [11.6, 16738.0], [11.7, 16738.0], [11.8, 16738.0], [11.9, 16738.0], [12.0, 16742.0], [12.1, 16742.0], [12.2, 16742.0], [12.3, 16742.0], [12.4, 16742.0], [12.5, 16771.0], [12.6, 16771.0], [12.7, 16771.0], [12.8, 16771.0], [12.9, 16771.0], [13.0, 16776.0], [13.1, 16776.0], [13.2, 16776.0], [13.3, 16776.0], [13.4, 16776.0], [13.5, 16781.0], [13.6, 16781.0], [13.7, 16781.0], [13.8, 16781.0], [13.9, 16781.0], [14.0, 16790.0], [14.1, 16790.0], [14.2, 16790.0], [14.3, 16790.0], [14.4, 16790.0], [14.5, 16793.0], [14.6, 16793.0], [14.7, 16793.0], [14.8, 16793.0], [14.9, 16793.0], [15.0, 16794.0], [15.1, 16794.0], [15.2, 16794.0], [15.3, 16794.0], [15.4, 16794.0], [15.5, 16798.0], [15.6, 16798.0], [15.7, 16798.0], [15.8, 16798.0], [15.9, 16798.0], [16.0, 16799.0], [16.1, 16799.0], [16.2, 16799.0], [16.3, 16799.0], [16.4, 16799.0], [16.5, 16800.0], [16.6, 16800.0], [16.7, 16800.0], [16.8, 16800.0], [16.9, 16800.0], [17.0, 16813.0], [17.1, 16813.0], [17.2, 16813.0], [17.3, 16813.0], [17.4, 16813.0], [17.5, 16813.0], [17.6, 16813.0], [17.7, 16813.0], [17.8, 16813.0], [17.9, 16813.0], [18.0, 16815.0], [18.1, 16815.0], [18.2, 16815.0], [18.3, 16815.0], [18.4, 16815.0], [18.5, 16835.0], [18.6, 16835.0], [18.7, 16835.0], [18.8, 16835.0], [18.9, 16835.0], [19.0, 16836.0], [19.1, 16836.0], [19.2, 16836.0], [19.3, 16836.0], [19.4, 16836.0], [19.5, 16838.0], [19.6, 16838.0], [19.7, 16838.0], [19.8, 16838.0], [19.9, 16838.0], [20.0, 16845.0], [20.1, 16845.0], [20.2, 16845.0], [20.3, 16845.0], [20.4, 16845.0], [20.5, 16849.0], [20.6, 16849.0], [20.7, 16849.0], [20.8, 16849.0], [20.9, 16849.0], [21.0, 16850.0], [21.1, 16850.0], [21.2, 16850.0], [21.3, 16850.0], [21.4, 16850.0], [21.5, 16851.0], [21.6, 16851.0], [21.7, 16851.0], [21.8, 16851.0], [21.9, 16851.0], [22.0, 16855.0], [22.1, 16855.0], [22.2, 16855.0], [22.3, 16855.0], [22.4, 16855.0], [22.5, 16856.0], [22.6, 16856.0], [22.7, 16856.0], [22.8, 16856.0], [22.9, 16856.0], [23.0, 16860.0], [23.1, 16860.0], [23.2, 16860.0], [23.3, 16860.0], [23.4, 16860.0], [23.5, 16862.0], [23.6, 16862.0], [23.7, 16862.0], [23.8, 16862.0], [23.9, 16862.0], [24.0, 16870.0], [24.1, 16870.0], [24.2, 16870.0], [24.3, 16870.0], [24.4, 16870.0], [24.5, 16884.0], [24.6, 16884.0], [24.7, 16884.0], [24.8, 16884.0], [24.9, 16884.0], [25.0, 16889.0], [25.1, 16889.0], [25.2, 16889.0], [25.3, 16889.0], [25.4, 16889.0], [25.5, 16919.0], [25.6, 16919.0], [25.7, 16919.0], [25.8, 16919.0], [25.9, 16919.0], [26.0, 16928.0], [26.1, 16928.0], [26.2, 16928.0], [26.3, 16928.0], [26.4, 16928.0], [26.5, 16940.0], [26.6, 16940.0], [26.7, 16940.0], [26.8, 16940.0], [26.9, 16940.0], [27.0, 16943.0], [27.1, 16943.0], [27.2, 16943.0], [27.3, 16943.0], [27.4, 16943.0], [27.5, 16953.0], [27.6, 16953.0], [27.7, 16953.0], [27.8, 16953.0], [27.9, 16953.0], [28.0, 16954.0], [28.1, 16954.0], [28.2, 16954.0], [28.3, 16954.0], [28.4, 16954.0], [28.5, 16956.0], [28.6, 16956.0], [28.7, 16956.0], [28.8, 16956.0], [28.9, 16956.0], [29.0, 16957.0], [29.1, 16957.0], [29.2, 16957.0], [29.3, 16957.0], [29.4, 16957.0], [29.5, 16959.0], [29.6, 16959.0], [29.7, 16959.0], [29.8, 16959.0], [29.9, 16959.0], [30.0, 16961.0], [30.1, 16961.0], [30.2, 16961.0], [30.3, 16961.0], [30.4, 16961.0], [30.5, 16966.0], [30.6, 16966.0], [30.7, 16966.0], [30.8, 16966.0], [30.9, 16966.0], [31.0, 16970.0], [31.1, 16970.0], [31.2, 16970.0], [31.3, 16970.0], [31.4, 16970.0], [31.5, 16970.0], [31.6, 16970.0], [31.7, 16970.0], [31.8, 16970.0], [31.9, 16970.0], [32.0, 16973.0], [32.1, 16973.0], [32.2, 16973.0], [32.3, 16973.0], [32.4, 16973.0], [32.5, 16974.0], [32.6, 16974.0], [32.7, 16974.0], [32.8, 16974.0], [32.9, 16974.0], [33.0, 16977.0], [33.1, 16977.0], [33.2, 16977.0], [33.3, 16977.0], [33.4, 16977.0], [33.5, 16980.0], [33.6, 16980.0], [33.7, 16980.0], [33.8, 16980.0], [33.9, 16980.0], [34.0, 16982.0], [34.1, 16982.0], [34.2, 16982.0], [34.3, 16982.0], [34.4, 16982.0], [34.5, 16986.0], [34.6, 16986.0], [34.7, 16986.0], [34.8, 16986.0], [34.9, 16986.0], [35.0, 16987.0], [35.1, 16987.0], [35.2, 16987.0], [35.3, 16987.0], [35.4, 16987.0], [35.5, 16989.0], [35.6, 16989.0], [35.7, 16989.0], [35.8, 16989.0], [35.9, 16989.0], [36.0, 16990.0], [36.1, 16990.0], [36.2, 16990.0], [36.3, 16990.0], [36.4, 16990.0], [36.5, 16994.0], [36.6, 16994.0], [36.7, 16994.0], [36.8, 16994.0], [36.9, 16994.0], [37.0, 16995.0], [37.1, 16995.0], [37.2, 16995.0], [37.3, 16995.0], [37.4, 16995.0], [37.5, 16997.0], [37.6, 16997.0], [37.7, 16997.0], [37.8, 16997.0], [37.9, 16997.0], [38.0, 16998.0], [38.1, 16998.0], [38.2, 16998.0], [38.3, 16998.0], [38.4, 16998.0], [38.5, 17007.0], [38.6, 17007.0], [38.7, 17007.0], [38.8, 17007.0], [38.9, 17007.0], [39.0, 17009.0], [39.1, 17009.0], [39.2, 17009.0], [39.3, 17009.0], [39.4, 17009.0], [39.5, 17013.0], [39.6, 17013.0], [39.7, 17013.0], [39.8, 17013.0], [39.9, 17013.0], [40.0, 17017.0], [40.1, 17017.0], [40.2, 17017.0], [40.3, 17017.0], [40.4, 17017.0], [40.5, 17018.0], [40.6, 17018.0], [40.7, 17018.0], [40.8, 17018.0], [40.9, 17018.0], [41.0, 17018.0], [41.1, 17018.0], [41.2, 17018.0], [41.3, 17018.0], [41.4, 17018.0], [41.5, 17021.0], [41.6, 17021.0], [41.7, 17021.0], [41.8, 17021.0], [41.9, 17021.0], [42.0, 17021.0], [42.1, 17021.0], [42.2, 17021.0], [42.3, 17021.0], [42.4, 17021.0], [42.5, 17026.0], [42.6, 17026.0], [42.7, 17026.0], [42.8, 17026.0], [42.9, 17026.0], [43.0, 17028.0], [43.1, 17028.0], [43.2, 17028.0], [43.3, 17028.0], [43.4, 17028.0], [43.5, 17038.0], [43.6, 17038.0], [43.7, 17038.0], [43.8, 17038.0], [43.9, 17038.0], [44.0, 17059.0], [44.1, 17059.0], [44.2, 17059.0], [44.3, 17059.0], [44.4, 17059.0], [44.5, 17078.0], [44.6, 17078.0], [44.7, 17078.0], [44.8, 17078.0], [44.9, 17078.0], [45.0, 17081.0], [45.1, 17081.0], [45.2, 17081.0], [45.3, 17081.0], [45.4, 17081.0], [45.5, 17108.0], [45.6, 17108.0], [45.7, 17108.0], [45.8, 17108.0], [45.9, 17108.0], [46.0, 17109.0], [46.1, 17109.0], [46.2, 17109.0], [46.3, 17109.0], [46.4, 17109.0], [46.5, 17110.0], [46.6, 17110.0], [46.7, 17110.0], [46.8, 17110.0], [46.9, 17110.0], [47.0, 17115.0], [47.1, 17115.0], [47.2, 17115.0], [47.3, 17115.0], [47.4, 17115.0], [47.5, 17124.0], [47.6, 17124.0], [47.7, 17124.0], [47.8, 17124.0], [47.9, 17124.0], [48.0, 17125.0], [48.1, 17125.0], [48.2, 17125.0], [48.3, 17125.0], [48.4, 17125.0], [48.5, 17132.0], [48.6, 17132.0], [48.7, 17132.0], [48.8, 17132.0], [48.9, 17132.0], [49.0, 17139.0], [49.1, 17139.0], [49.2, 17139.0], [49.3, 17139.0], [49.4, 17139.0], [49.5, 17144.0], [49.6, 17144.0], [49.7, 17144.0], [49.8, 17144.0], [49.9, 17144.0], [50.0, 17150.0], [50.1, 17150.0], [50.2, 17150.0], [50.3, 17150.0], [50.4, 17150.0], [50.5, 17158.0], [50.6, 17158.0], [50.7, 17158.0], [50.8, 17158.0], [50.9, 17158.0], [51.0, 17169.0], [51.1, 17169.0], [51.2, 17169.0], [51.3, 17169.0], [51.4, 17169.0], [51.5, 17177.0], [51.6, 17177.0], [51.7, 17177.0], [51.8, 17177.0], [51.9, 17177.0], [52.0, 17185.0], [52.1, 17185.0], [52.2, 17185.0], [52.3, 17185.0], [52.4, 17185.0], [52.5, 17185.0], [52.6, 17185.0], [52.7, 17185.0], [52.8, 17185.0], [52.9, 17185.0], [53.0, 17186.0], [53.1, 17186.0], [53.2, 17186.0], [53.3, 17186.0], [53.4, 17186.0], [53.5, 17196.0], [53.6, 17196.0], [53.7, 17196.0], [53.8, 17196.0], [53.9, 17196.0], [54.0, 17199.0], [54.1, 17199.0], [54.2, 17199.0], [54.3, 17199.0], [54.4, 17199.0], [54.5, 17206.0], [54.6, 17206.0], [54.7, 17206.0], [54.8, 17206.0], [54.9, 17206.0], [55.0, 17208.0], [55.1, 17208.0], [55.2, 17208.0], [55.3, 17208.0], [55.4, 17208.0], [55.5, 17210.0], [55.6, 17210.0], [55.7, 17210.0], [55.8, 17210.0], [55.9, 17210.0], [56.0, 17212.0], [56.1, 17212.0], [56.2, 17212.0], [56.3, 17212.0], [56.4, 17212.0], [56.5, 17222.0], [56.6, 17222.0], [56.7, 17222.0], [56.8, 17222.0], [56.9, 17222.0], [57.0, 17253.0], [57.1, 17253.0], [57.2, 17253.0], [57.3, 17253.0], [57.4, 17253.0], [57.5, 17254.0], [57.6, 17254.0], [57.7, 17254.0], [57.8, 17254.0], [57.9, 17254.0], [58.0, 17254.0], [58.1, 17254.0], [58.2, 17254.0], [58.3, 17254.0], [58.4, 17254.0], [58.5, 17263.0], [58.6, 17263.0], [58.7, 17263.0], [58.8, 17263.0], [58.9, 17263.0], [59.0, 17270.0], [59.1, 17270.0], [59.2, 17270.0], [59.3, 17270.0], [59.4, 17270.0], [59.5, 17271.0], [59.6, 17271.0], [59.7, 17271.0], [59.8, 17271.0], [59.9, 17271.0], [60.0, 17276.0], [60.1, 17276.0], [60.2, 17276.0], [60.3, 17276.0], [60.4, 17276.0], [60.5, 17278.0], [60.6, 17278.0], [60.7, 17278.0], [60.8, 17278.0], [60.9, 17278.0], [61.0, 17281.0], [61.1, 17281.0], [61.2, 17281.0], [61.3, 17281.0], [61.4, 17281.0], [61.5, 17281.0], [61.6, 17281.0], [61.7, 17281.0], [61.8, 17281.0], [61.9, 17281.0], [62.0, 17289.0], [62.1, 17289.0], [62.2, 17289.0], [62.3, 17289.0], [62.4, 17289.0], [62.5, 17290.0], [62.6, 17290.0], [62.7, 17290.0], [62.8, 17290.0], [62.9, 17290.0], [63.0, 17297.0], [63.1, 17297.0], [63.2, 17297.0], [63.3, 17297.0], [63.4, 17297.0], [63.5, 17304.0], [63.6, 17304.0], [63.7, 17304.0], [63.8, 17304.0], [63.9, 17304.0], [64.0, 17308.0], [64.1, 17308.0], [64.2, 17308.0], [64.3, 17308.0], [64.4, 17308.0], [64.5, 17313.0], [64.6, 17313.0], [64.7, 17313.0], [64.8, 17313.0], [64.9, 17313.0], [65.0, 17326.0], [65.1, 17326.0], [65.2, 17326.0], [65.3, 17326.0], [65.4, 17326.0], [65.5, 17338.0], [65.6, 17338.0], [65.7, 17338.0], [65.8, 17338.0], [65.9, 17338.0], [66.0, 17342.0], [66.1, 17342.0], [66.2, 17342.0], [66.3, 17342.0], [66.4, 17342.0], [66.5, 17348.0], [66.6, 17348.0], [66.7, 17348.0], [66.8, 17348.0], [66.9, 17348.0], [67.0, 17364.0], [67.1, 17364.0], [67.2, 17364.0], [67.3, 17364.0], [67.4, 17364.0], [67.5, 17378.0], [67.6, 17378.0], [67.7, 17378.0], [67.8, 17378.0], [67.9, 17378.0], [68.0, 17386.0], [68.1, 17386.0], [68.2, 17386.0], [68.3, 17386.0], [68.4, 17386.0], [68.5, 17397.0], [68.6, 17397.0], [68.7, 17397.0], [68.8, 17397.0], [68.9, 17397.0], [69.0, 17398.0], [69.1, 17398.0], [69.2, 17398.0], [69.3, 17398.0], [69.4, 17398.0], [69.5, 17398.0], [69.6, 17398.0], [69.7, 17398.0], [69.8, 17398.0], [69.9, 17398.0], [70.0, 17398.0], [70.1, 17398.0], [70.2, 17398.0], [70.3, 17398.0], [70.4, 17398.0], [70.5, 17447.0], [70.6, 17447.0], [70.7, 17447.0], [70.8, 17447.0], [70.9, 17447.0], [71.0, 17448.0], [71.1, 17448.0], [71.2, 17448.0], [71.3, 17448.0], [71.4, 17448.0], [71.5, 17454.0], [71.6, 17454.0], [71.7, 17454.0], [71.8, 17454.0], [71.9, 17454.0], [72.0, 17477.0], [72.1, 17477.0], [72.2, 17477.0], [72.3, 17477.0], [72.4, 17477.0], [72.5, 17499.0], [72.6, 17499.0], [72.7, 17499.0], [72.8, 17499.0], [72.9, 17499.0], [73.0, 17555.0], [73.1, 17555.0], [73.2, 17555.0], [73.3, 17555.0], [73.4, 17555.0], [73.5, 17567.0], [73.6, 17567.0], [73.7, 17567.0], [73.8, 17567.0], [73.9, 17567.0], [74.0, 17580.0], [74.1, 17580.0], [74.2, 17580.0], [74.3, 17580.0], [74.4, 17580.0], [74.5, 17587.0], [74.6, 17587.0], [74.7, 17587.0], [74.8, 17587.0], [74.9, 17587.0], [75.0, 17593.0], [75.1, 17593.0], [75.2, 17593.0], [75.3, 17593.0], [75.4, 17593.0], [75.5, 17606.0], [75.6, 17606.0], [75.7, 17606.0], [75.8, 17606.0], [75.9, 17606.0], [76.0, 17620.0], [76.1, 17620.0], [76.2, 17620.0], [76.3, 17620.0], [76.4, 17620.0], [76.5, 17621.0], [76.6, 17621.0], [76.7, 17621.0], [76.8, 17621.0], [76.9, 17621.0], [77.0, 17621.0], [77.1, 17621.0], [77.2, 17621.0], [77.3, 17621.0], [77.4, 17621.0], [77.5, 17632.0], [77.6, 17632.0], [77.7, 17632.0], [77.8, 17632.0], [77.9, 17632.0], [78.0, 17646.0], [78.1, 17646.0], [78.2, 17646.0], [78.3, 17646.0], [78.4, 17646.0], [78.5, 17687.0], [78.6, 17687.0], [78.7, 17687.0], [78.8, 17687.0], [78.9, 17687.0], [79.0, 17712.0], [79.1, 17712.0], [79.2, 17712.0], [79.3, 17712.0], [79.4, 17712.0], [79.5, 17719.0], [79.6, 17719.0], [79.7, 17719.0], [79.8, 17719.0], [79.9, 17719.0], [80.0, 17726.0], [80.1, 17726.0], [80.2, 17726.0], [80.3, 17726.0], [80.4, 17726.0], [80.5, 17803.0], [80.6, 17803.0], [80.7, 17803.0], [80.8, 17803.0], [80.9, 17803.0], [81.0, 17974.0], [81.1, 17974.0], [81.2, 17974.0], [81.3, 17974.0], [81.4, 17974.0], [81.5, 17974.0], [81.6, 17974.0], [81.7, 17974.0], [81.8, 17974.0], [81.9, 17974.0], [82.0, 17986.0], [82.1, 17986.0], [82.2, 17986.0], [82.3, 17986.0], [82.4, 17986.0], [82.5, 18029.0], [82.6, 18029.0], [82.7, 18029.0], [82.8, 18029.0], [82.9, 18029.0], [83.0, 18202.0], [83.1, 18202.0], [83.2, 18202.0], [83.3, 18202.0], [83.4, 18202.0], [83.5, 18275.0], [83.6, 18275.0], [83.7, 18275.0], [83.8, 18275.0], [83.9, 18275.0], [84.0, 18479.0], [84.1, 18479.0], [84.2, 18479.0], [84.3, 18479.0], [84.4, 18479.0], [84.5, 18479.0], [84.6, 18479.0], [84.7, 18479.0], [84.8, 18479.0], [84.9, 18479.0], [85.0, 18719.0], [85.1, 18719.0], [85.2, 18719.0], [85.3, 18719.0], [85.4, 18719.0], [85.5, 19098.0], [85.6, 19098.0], [85.7, 19098.0], [85.8, 19098.0], [85.9, 19098.0], [86.0, 19822.0], [86.1, 19822.0], [86.2, 19822.0], [86.3, 19822.0], [86.4, 19822.0], [86.5, 19888.0], [86.6, 19888.0], [86.7, 19888.0], [86.8, 19888.0], [86.9, 19888.0], [87.0, 19927.0], [87.1, 19927.0], [87.2, 19927.0], [87.3, 19927.0], [87.4, 19927.0], [87.5, 19953.0], [87.6, 19953.0], [87.7, 19953.0], [87.8, 19953.0], [87.9, 19953.0], [88.0, 20055.0], [88.1, 20055.0], [88.2, 20055.0], [88.3, 20055.0], [88.4, 20055.0], [88.5, 20156.0], [88.6, 20156.0], [88.7, 20156.0], [88.8, 20156.0], [88.9, 20156.0], [89.0, 20271.0], [89.1, 20271.0], [89.2, 20271.0], [89.3, 20271.0], [89.4, 20271.0], [89.5, 20361.0], [89.6, 20361.0], [89.7, 20361.0], [89.8, 20361.0], [89.9, 20361.0], [90.0, 20455.0], [90.1, 20455.0], [90.2, 20455.0], [90.3, 20455.0], [90.4, 20455.0], [90.5, 20503.0], [90.6, 20503.0], [90.7, 20503.0], [90.8, 20503.0], [90.9, 20503.0], [91.0, 20649.0], [91.1, 20649.0], [91.2, 20649.0], [91.3, 20649.0], [91.4, 20649.0], [91.5, 20725.0], [91.6, 20725.0], [91.7, 20725.0], [91.8, 20725.0], [91.9, 20725.0], [92.0, 21255.0], [92.1, 21255.0], [92.2, 21255.0], [92.3, 21255.0], [92.4, 21255.0], [92.5, 23264.0], [92.6, 23264.0], [92.7, 23264.0], [92.8, 23264.0], [92.9, 23264.0], [93.0, 23433.0], [93.1, 23433.0], [93.2, 23433.0], [93.3, 23433.0], [93.4, 23433.0], [93.5, 23472.0], [93.6, 23472.0], [93.7, 23472.0], [93.8, 23472.0], [93.9, 23472.0], [94.0, 23568.0], [94.1, 23568.0], [94.2, 23568.0], [94.3, 23568.0], [94.4, 23568.0], [94.5, 23684.0], [94.6, 23684.0], [94.7, 23684.0], [94.8, 23684.0], [94.9, 23684.0], [95.0, 23884.0], [95.1, 23884.0], [95.2, 23884.0], [95.3, 23884.0], [95.4, 23884.0], [95.5, 23976.0], [95.6, 23976.0], [95.7, 23976.0], [95.8, 23976.0], [95.9, 23976.0], [96.0, 28132.0], [96.1, 28132.0], [96.2, 28132.0], [96.3, 28132.0], [96.4, 28132.0], [96.5, 28402.0], [96.6, 28402.0], [96.7, 28402.0], [96.8, 28402.0], [96.9, 28402.0], [97.0, 28411.0], [97.1, 28411.0], [97.2, 28411.0], [97.3, 28411.0], [97.4, 28411.0], [97.5, 28503.0], [97.6, 28503.0], [97.7, 28503.0], [97.8, 28503.0], [97.9, 28503.0], [98.0, 29774.0], [98.1, 29774.0], [98.2, 29774.0], [98.3, 29774.0], [98.4, 29774.0], [98.5, 30111.0], [98.6, 30111.0], [98.7, 30111.0], [98.8, 30111.0], [98.9, 30111.0], [99.0, 30143.0], [99.1, 30143.0], [99.2, 30143.0], [99.3, 30143.0], [99.4, 30143.0], [99.5, 30264.0], [99.6, 30264.0], [99.7, 30264.0], [99.8, 30264.0], [99.9, 30264.0]], "isOverall": false, "label": "HTTP 要求: Step1: Login", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 26.0, "series": [{"data": [[900.0, 2.0], [1000.0, 2.0], [1100.0, 2.0], [1300.0, 1.0], [2200.0, 1.0], [2300.0, 1.0], [2400.0, 2.0], [2500.0, 1.0], [2600.0, 1.0], [2800.0, 3.0], [2900.0, 4.0], [3000.0, 5.0], [3100.0, 3.0], [3600.0, 1.0], [4600.0, 1.0], [4500.0, 1.0], [4700.0, 1.0], [5200.0, 3.0], [5300.0, 5.0], [5600.0, 2.0], [5400.0, 2.0], [5700.0, 2.0], [6100.0, 1.0], [6300.0, 4.0], [6200.0, 1.0], [6400.0, 6.0], [6500.0, 6.0], [6600.0, 1.0], [6700.0, 2.0], [6900.0, 1.0], [7300.0, 4.0], [7400.0, 5.0], [7200.0, 2.0], [7500.0, 1.0], [7600.0, 2.0], [7800.0, 3.0], [8100.0, 2.0], [8000.0, 2.0], [8300.0, 8.0], [8200.0, 2.0], [8600.0, 8.0], [8500.0, 6.0], [8400.0, 10.0], [8700.0, 4.0], [8800.0, 3.0], [9000.0, 2.0], [9200.0, 1.0], [9300.0, 1.0], [9600.0, 1.0], [9700.0, 1.0], [9400.0, 1.0], [10100.0, 4.0], [10200.0, 3.0], [9800.0, 1.0], [10000.0, 6.0], [9900.0, 2.0], [10400.0, 3.0], [10500.0, 3.0], [10700.0, 1.0], [10300.0, 3.0], [11200.0, 4.0], [11000.0, 4.0], [11100.0, 3.0], [10800.0, 4.0], [11400.0, 4.0], [11300.0, 3.0], [11600.0, 1.0], [11500.0, 1.0], [11900.0, 3.0], [12100.0, 1.0], [12200.0, 1.0], [12700.0, 3.0], [12400.0, 2.0], [12500.0, 1.0], [13000.0, 2.0]], "isOverall": false, "label": "HTTP 要求: Step3: Change Avatar", "isController": false}, {"data": [[0.0, 4.0], [600.0, 7.0], [700.0, 5.0], [800.0, 9.0], [900.0, 3.0], [1000.0, 9.0], [1100.0, 4.0], [1200.0, 4.0], [1300.0, 3.0], [1400.0, 3.0], [1500.0, 1.0], [1600.0, 5.0], [1700.0, 1.0], [1800.0, 2.0], [1900.0, 4.0], [2000.0, 2.0], [2100.0, 2.0], [2200.0, 1.0], [2300.0, 1.0], [2500.0, 3.0], [2600.0, 1.0], [2700.0, 3.0], [2800.0, 4.0], [2900.0, 9.0], [3000.0, 5.0], [3100.0, 4.0], [3300.0, 1.0], [3200.0, 1.0], [3500.0, 3.0], [3600.0, 3.0], [3700.0, 2.0], [3800.0, 2.0], [4700.0, 1.0], [5100.0, 1.0], [5400.0, 1.0], [6100.0, 1.0], [6300.0, 1.0], [6500.0, 1.0], [6900.0, 1.0], [7000.0, 1.0], [7200.0, 1.0], [7600.0, 2.0], [8300.0, 2.0], [8500.0, 1.0], [8400.0, 1.0], [8800.0, 1.0], [8900.0, 1.0], [11800.0, 1.0], [100.0, 7.0], [200.0, 21.0], [300.0, 17.0], [400.0, 16.0], [500.0, 10.0]], "isOverall": false, "label": "HTTP 要求: Step2: Profile", "isController": false}, {"data": [[16300.0, 1.0], [16600.0, 8.0], [16900.0, 26.0], [16400.0, 2.0], [16700.0, 15.0], [16800.0, 18.0], [16500.0, 7.0], [17000.0, 14.0], [17100.0, 18.0], [17200.0, 18.0], [17300.0, 14.0], [17400.0, 5.0], [17500.0, 5.0], [17600.0, 7.0], [17800.0, 1.0], [17700.0, 3.0], [17900.0, 3.0], [18000.0, 1.0], [18200.0, 2.0], [18400.0, 2.0], [18700.0, 1.0], [19000.0, 1.0], [19800.0, 2.0], [19900.0, 2.0], [20100.0, 1.0], [20200.0, 1.0], [20400.0, 1.0], [20000.0, 1.0], [20300.0, 1.0], [20500.0, 1.0], [20600.0, 1.0], [20700.0, 1.0], [21200.0, 1.0], [23200.0, 1.0], [23500.0, 1.0], [23400.0, 2.0], [23800.0, 1.0], [23600.0, 1.0], [23900.0, 1.0], [28400.0, 2.0], [28100.0, 1.0], [28500.0, 1.0], [29700.0, 1.0], [30100.0, 2.0], [30200.0, 1.0]], "isOverall": false, "label": "HTTP 要求: Step1: Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 30200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 64.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 471.0, "series": [{"data": [[0.0, 65.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 64.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 471.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 80.3666666666667, "minX": 1.67929974E12, "maxY": 194.98809523809518, "series": [{"data": [[1.6792998E12, 80.3666666666667], [1.67929974E12, 194.98809523809518]], "isOverall": false, "label": "執行緒群組", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6792998E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 78.0, "minX": 2.0, "maxY": 30203.5, "series": [{"data": [[2.0, 1111.5], [4.0, 1787.5], [5.0, 1005.0], [6.0, 951.0], [7.0, 2435.0], [8.0, 959.0], [9.0, 2325.0], [10.0, 5387.0], [11.0, 5386.0], [13.0, 6734.5], [15.0, 6255.0], [16.0, 2466.0], [17.0, 7354.0], [19.0, 5421.0], [20.0, 5359.0], [22.0, 6326.0], [25.0, 9008.0], [27.0, 4302.5], [29.0, 5544.5], [30.0, 3660.0], [31.0, 6458.0], [33.0, 12136.0], [35.0, 10070.0], [34.0, 9991.0], [38.0, 12186.666666666666], [41.0, 7162.333333333333], [45.0, 13038.0], [44.0, 8862.0], [49.0, 6584.0], [48.0, 7685.0], [51.0, 10018.0], [50.0, 10090.0], [54.0, 7668.333333333333], [57.0, 6499.0], [56.0, 9146.5], [59.0, 12592.0], [58.0, 9996.0], [61.0, 12797.0], [60.0, 13017.0], [63.0, 12790.0], [62.0, 11446.0], [67.0, 5824.0], [65.0, 10016.0], [64.0, 12457.0], [71.0, 12720.0], [70.0, 9795.0], [69.0, 9893.0], [68.0, 10213.0], [75.0, 5207.0], [74.0, 11092.0], [73.0, 10849.0], [72.0, 11244.0], [79.0, 8609.0], [78.0, 8314.5], [76.0, 11499.0], [83.0, 11461.0], [82.0, 9913.0], [80.0, 10350.0], [87.0, 11398.0], [86.0, 10050.666666666666], [91.0, 11634.0], [90.0, 11549.0], [89.0, 11364.0], [88.0, 8613.0], [95.0, 8569.0], [94.0, 10019.5], [92.0, 10451.0], [99.0, 10436.0], [98.0, 8562.0], [97.0, 11434.0], [96.0, 8628.0], [103.0, 10305.0], [102.0, 10232.0], [101.0, 10223.0], [100.0, 8482.0], [106.0, 9869.666666666666], [111.0, 11161.0], [110.0, 8546.0], [109.0, 10837.0], [115.0, 9122.25], [119.0, 8622.5], [117.0, 11135.0], [116.0, 11242.0], [123.0, 8394.0], [122.0, 10012.0], [127.0, 6480.0], [126.0, 9617.0], [125.0, 10421.0], [124.0, 11279.0], [135.0, 8573.333333333334], [132.0, 8717.0], [131.0, 7860.0], [130.0, 9073.0], [128.0, 6592.0], [143.0, 6994.0], [141.0, 7479.0], [140.0, 7207.0], [139.0, 6551.0], [138.0, 7470.0], [136.0, 8759.0], [150.0, 7726.5], [145.0, 5631.0], [158.0, 8092.0], [156.0, 7890.666666666667], [153.0, 5782.0], [152.0, 8407.5], [167.0, 7370.0], [166.0, 8351.0], [165.0, 7487.0], [164.0, 8457.833333333334], [175.0, 8600.0], [174.0, 8575.0], [173.0, 7816.0], [172.0, 8179.0], [171.0, 7368.0], [170.0, 8471.0], [169.0, 5625.0], [168.0, 7463.0], [183.0, 6518.0], [182.0, 6702.0], [181.0, 6511.0], [180.0, 7524.0], [179.0, 8154.0], [178.0, 8331.0], [177.0, 8208.0], [176.0, 8251.0], [191.0, 2964.0], [190.0, 2861.0], [189.0, 2958.0], [188.0, 2924.0], [187.0, 3055.0], [186.0, 3179.0], [185.0, 3005.0], [184.0, 6413.0], [199.0, 2269.0], [198.0, 3130.0], [197.0, 2887.0], [196.0, 3054.0], [195.0, 3088.0], [194.0, 2872.0], [193.0, 3079.0], [192.0, 2998.0], [200.0, 1328.0]], "isOverall": false, "label": "HTTP 要求: Step3: Change Avatar", "isController": false}, {"data": [[100.98000000000002, 7887.090000000003]], "isOverall": false, "label": "HTTP 要求: Step3: Change Avatar-Aggregated", "isController": false}, {"data": [[38.0, 78.0], [59.0, 147.0], [64.0, 1416.0], [69.0, 1547.0], [83.0, 515.0], [86.0, 406.0], [89.0, 8473.0], [103.0, 8348.0], [125.0, 7611.0], [124.0, 11803.0], [128.0, 2793.0], [156.0, 1904.0], [164.0, 1922.0], [173.0, 2086.0], [172.0, 7084.0], [171.0, 1865.0], [168.0, 1942.0], [182.0, 4967.0], [181.0, 4694.625], [180.0, 5079.0], [178.0, 8818.0], [177.0, 8647.0], [191.0, 1925.4], [190.0, 3013.0], [188.0, 2703.7777777777774], [187.0, 3059.0], [186.0, 3622.0], [185.0, 3214.5], [184.0, 4693.4], [199.0, 1685.4285714285713], [198.0, 2261.2], [197.0, 3062.0], [196.0, 2511.6666666666665], [195.0, 2606.25], [194.0, 2894.0], [193.0, 2727.0], [192.0, 2839.4], [200.0, 584.5818181818181], [29.0, 85.5]], "isOverall": false, "label": "HTTP 要求: Step2: Profile", "isController": false}, {"data": [[187.09500000000003, 1848.6549999999997]], "isOverall": false, "label": "HTTP 要求: Step2: Profile-Aggregated", "isController": false}, {"data": [[38.0, 30203.5], [182.0, 23884.0], [181.0, 23626.6], [191.0, 20213.5], [185.0, 20266.285714285714], [184.0, 21748.0], [199.0, 18788.5], [198.0, 19822.0], [192.0, 19927.0], [200.0, 17118.21764705883], [70.0, 29774.0], [69.0, 30111.0], [80.0, 28503.0], [98.0, 28402.0], [125.0, 28411.0], [124.0, 28132.0]], "isOverall": false, "label": "HTTP 要求: Step1: Login", "isController": false}, {"data": [[193.73, 18053.575000000008]], "isOverall": false, "label": "HTTP 要求: Step1: Login-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 200.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2018.6333333333334, "minX": 1.67929974E12, "maxY": 6381.133333333333, "series": [{"data": [[1.6792998E12, 3299.133333333333], [1.67929974E12, 6381.133333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6792998E12, 2018.6333333333334], [1.67929974E12, 3474.7]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6792998E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1744.725806451613, "minX": 1.67929974E12, "maxY": 29217.500000000004, "series": [{"data": [[1.6792998E12, 8412.044303797464], [1.67929974E12, 5912.261904761905]], "isOverall": false, "label": "HTTP 要求: Step3: Change Avatar", "isController": false}, {"data": [[1.6792998E12, 3229.4285714285716], [1.67929974E12, 1744.725806451613]], "isOverall": false, "label": "HTTP 要求: Step2: Profile", "isController": false}, {"data": [[1.6792998E12, 29217.500000000004], [1.67929974E12, 17588.41145833334]], "isOverall": false, "label": "HTTP 要求: Step1: Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6792998E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1744.6612903225805, "minX": 1.67929974E12, "maxY": 29217.500000000004, "series": [{"data": [[1.6792998E12, 8411.993670886079], [1.67929974E12, 5912.190476190476]], "isOverall": false, "label": "HTTP 要求: Step3: Change Avatar", "isController": false}, {"data": [[1.6792998E12, 3229.4285714285716], [1.67929974E12, 1744.6612903225805]], "isOverall": false, "label": "HTTP 要求: Step2: Profile", "isController": false}, {"data": [[1.6792998E12, 29217.500000000004], [1.67929974E12, 17588.322916666653]], "isOverall": false, "label": "HTTP 要求: Step1: Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6792998E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.67929974E12, "maxY": 2272.875, "series": [{"data": [[1.6792998E12, 0.0], [1.67929974E12, 0.0]], "isOverall": false, "label": "HTTP 要求: Step3: Change Avatar", "isController": false}, {"data": [[1.6792998E12, 0.0], [1.67929974E12, 0.0]], "isOverall": false, "label": "HTTP 要求: Step2: Profile", "isController": false}, {"data": [[1.6792998E12, 2272.875], [1.67929974E12, 2008.7552083333328]], "isOverall": false, "label": "HTTP 要求: Step1: Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6792998E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 77.0, "minX": 1.67929974E12, "maxY": 30264.0, "series": [{"data": [[1.6792998E12, 30264.0], [1.67929974E12, 23976.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6792998E12, 78.0], [1.67929974E12, 77.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6792998E12, 12116.7], [1.67929974E12, 17592.4]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6792998E12, 30165.989999999998], [1.67929974E12, 23547.840000000004]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6792998E12, 8611.0], [1.67929974E12, 8166.5]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.6792998E12, 13036.949999999999], [1.67929974E12, 19079.049999999996]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6792998E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1091.5, "minX": 3.0, "maxY": 16941.5, "series": [{"data": [[8.0, 2221.0], [65.0, 2998.0], [34.0, 7976.5], [10.0, 8712.5], [3.0, 4739.0], [205.0, 16835.0], [50.0, 1091.5], [55.0, 10305.0], [54.0, 10017.0], [27.0, 5280.0], [30.0, 16941.5], [15.0, 6511.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 205.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1091.0, "minX": 3.0, "maxY": 16941.5, "series": [{"data": [[8.0, 2221.0], [65.0, 2998.0], [34.0, 7976.5], [10.0, 8712.5], [3.0, 4739.0], [205.0, 16835.0], [50.0, 1091.0], [55.0, 10305.0], [54.0, 10017.0], [27.0, 5280.0], [30.0, 16941.5], [15.0, 6511.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 205.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.36666666666666664, "minX": 1.67929974E12, "maxY": 9.633333333333333, "series": [{"data": [[1.6792998E12, 0.36666666666666664], [1.67929974E12, 9.633333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6792998E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.67929974E12, "maxY": 7.0, "series": [{"data": [[1.6792998E12, 3.0], [1.67929974E12, 7.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6792998E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.13333333333333333, "minX": 1.67929974E12, "maxY": 3.2, "series": [{"data": [[1.6792998E12, 2.6333333333333333], [1.67929974E12, 0.7]], "isOverall": false, "label": "HTTP 要求: Step3: Change Avatar-success", "isController": false}, {"data": [[1.6792998E12, 0.13333333333333333], [1.67929974E12, 3.2]], "isOverall": false, "label": "HTTP 要求: Step1: Login-success", "isController": false}, {"data": [[1.6792998E12, 0.23333333333333334], [1.67929974E12, 3.1]], "isOverall": false, "label": "HTTP 要求: Step2: Profile-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6792998E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.67929974E12, "maxY": 7.0, "series": [{"data": [[1.6792998E12, 3.0], [1.67929974E12, 7.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6792998E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

